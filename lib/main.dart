import 'dart:convert';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<List<Autogenerated>> load() async {
  final response = await http.get(Uri.parse(
      'https://www.metaweather.com/api/location/2122265/2022/01/19/'));

  if (response.statusCode == 200) {
    print(response.body);
    dynamic jsons = jsonDecode(response.body);
    List<Autogenerated> result = [];
    for (var value in jsons) {
      result.add(Autogenerated.fromJson(value as Map<String, dynamic>));
    }
    return result;
  } else {
    throw Exception('Failed to load album');
  }
}

void main() => runApp(const MyApp());

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  var officesList;

  @override
  void initState() {
    super.initState();
    officesList = load();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: 'Weather Moscow',
        theme: ThemeData(primarySwatch: Colors.blue),
        home: Scaffold(
            appBar: AppBar(
              backgroundColor: Colors.black87,
              title: Text("Weather Moscow"),
              centerTitle: true,
            ),
            body: Center(
              child: ListView(
                children: <Widget>[
                  FutureBuilder<List<Autogenerated>>(
                    future: officesList,
                    builder: (context, snapshot) {
                      if (snapshot.hasData) {
                        return Column(
                          children: <Widget>[
                            SizedBox(height: 50.0),
                            CityVeiw(snapshot: snapshot),
                          ],
                        );
                      } else {
                        return CircularProgressIndicator();
                      }
                    },
                  )
                ],
              ),
            )));
  }
}

class CityVeiw extends StatelessWidget {
  final AsyncSnapshot<List<Autogenerated>> snapshot;

  // ignore: use_key_in_widget_constructors
  const CityVeiw({required this.snapshot});

  @override
  Widget build(BuildContext context) {
    var temp = snapshot.data;
    return Container(
      child: Column(
        children: <Widget>[
          Text(
            '$temp',
            style: TextStyle(fontSize: 24.0, color: Colors.black87),
          )
        ],
      ),
    );
  }
}

class Autogenerated {
  List<ConsolidatedWeather> consolidatedWeather;
  String? time;
  String? sunRise;
  String? sunSet;
  String? timezoneName;
  Parent? parent;
  List<Sources> sources;
  String? title;
  String? locationType;
  int? woeid;
  String? lattLong;
  String? timezone;

  Autogenerated(
      {required this.consolidatedWeather,
      required this.time,
      required this.sunRise,
      required this.sunSet,
      required this.timezoneName,
      required this.parent,
      required this.sources,
      required this.title,
      required this.locationType,
      required this.woeid,
      required this.lattLong,
      required this.timezone});

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
        consolidatedWeather: (json['consolidated_weather'] as List<dynamic>)
            .map((dynamic e) =>
                ConsolidatedWeather.fromJson(e as Map<String, dynamic>))
            .toList(),
        time: json['time'],
        sunRise: json['sun_rise'],
        sunSet: json['sun_set'],
        timezoneName: json['timezone_name'],
        parent: json['parent'],
        sources: ((json['sources'] ?? []) as List<dynamic>)
            .map((dynamic e) => Sources.fromJson(e as Map<String, dynamic>))
            .toList(),
        title: json['title'],
        locationType: json['location_type'],
        woeid: json['woeid'],
        lattLong: json['latt_long'],
        timezone: json['timezone']);
  }
}

class ConsolidatedWeather {
  int id;
  String weatherStateName;
  String weatherStateAbbr;
  String windDirectionCompass;
  String created;
  String applicableDate;
  double minTemp;
  double maxTemp;
  double theTemp;
  double windSpeed;
  double windDirection;
  double airPressure;
  int humidity;
  double visibility;
  int predictability;

  ConsolidatedWeather(
      {required this.id,
      required this.weatherStateName,
      required this.weatherStateAbbr,
      required this.windDirectionCompass,
      required this.created,
      required this.applicableDate,
      required this.minTemp,
      required this.maxTemp,
      required this.theTemp,
      required this.windSpeed,
      required this.windDirection,
      required this.airPressure,
      required this.humidity,
      required this.visibility,
      required this.predictability});

  factory ConsolidatedWeather.fromJson(Map<String, dynamic> json) {
    return ConsolidatedWeather(
        id: json['id'],
        weatherStateName: json['weather_state_name'],
        weatherStateAbbr: json['weather_state_abbr'],
        windDirectionCompass: json['wind_direction_compass'],
        created: json['created'],
        applicableDate: json['applicable_date'],
        minTemp: json['min_temp'],
        maxTemp: json['max_temp'],
        theTemp: json['the_temp'],
        windSpeed: json['wind_speed'],
        windDirection: json['wind_direction'],
        airPressure: json['air_pressure'],
        humidity: json['humidity'],
        visibility: json['visibility'],
        predictability: json['predictability']);
  }
}

class Parent {
  String title;
  String locationType;
  int woeid;
  String lattLong;

  Parent(
      {required this.title,
      required this.locationType,
      required this.woeid,
      required this.lattLong});

  factory Parent.fromJson(Map<String, dynamic> json) {
    return Parent(
        title: json['title'],
        locationType: json['location_type'],
        woeid: json['woeid'],
        lattLong: json['latt_long']);
  }
}

class Sources {
  String title;
  String slug;
  String url;
  int crawlRate;

  Sources(
      {required this.title,
      required this.slug,
      required this.url,
      required this.crawlRate});

  factory Sources.fromJson(Map<String, dynamic> json) {
    return Sources(
        title: json['title'],
        slug: json['slug'],
        url: json['url'],
        crawlRate: json['crawl_rate']);
  }
}
